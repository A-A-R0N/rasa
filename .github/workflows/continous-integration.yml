name: Continuous Integration

on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa on pypi (account credentials in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null
  PIP_USE_PEP517: false

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 2
      matrix:
        os: [windows-latest]
        python-version: [3.6]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      run: |
        echo "::set-env name=POETRY_VERSION::$(scripts/poetry-version.sh)"
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v1
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ matrix.python-version }}

    - name: Install Dependencies (Linux) üì¶
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Install Dependencies (Windows) üì¶
      if: matrix.os == 'windows-latest'
      run: |
        make install-full-windows
        make prepare-tests-windows

    - name: Test Code üîç
      if: matrix.os == 'ubuntu-latest'
      env:
        JOBS: 2
      run: make test

    - name: Test Code (Windows) üîç
      if: matrix.os == 'windows-latest'
      env:
        JOBS: 2
      run: make test-windows

    - name: Send Coverage Report üìä
      if: matrix.python-version == 3.6
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls
